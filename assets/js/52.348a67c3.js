(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{552:function(t,a,s){"use strict";s.r(a);var n=s(15),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"动态语言的并发处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态语言的并发处理"}},[t._v("#")]),t._v(" 动态语言的并发处理")]),t._v(" "),s("h2",{attrs:{id:"什么是进程、线程、协程？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程、线程、协程？"}},[t._v("#")]),t._v(" 什么是进程、线程、协程？")]),t._v(" "),s("h3",{attrs:{id:"进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),s("p",[t._v("进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。进程是一个执行中的程序。")]),t._v(" "),s("h4",{attrs:{id:"进程的三态模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程的三态模型"}},[t._v("#")]),t._v(" 进程的三态模型")]),t._v(" "),s("p",[t._v("多道程序系统中，进程在处理器上交替运行，状态不断的发生变化。")]),t._v(" "),s("h5",{attrs:{id:"运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行"}},[t._v("#")]),t._v(" 运行")]),t._v(" "),s("p",[t._v("当一个进程在处理机上运行时，则称该进程处于运行状态。处于此状态的进程的数目小于处理器的数目，对于单处理机系统，处于运行状态的进程只有一个。在没有其他进程可以执行时（如所有进程都在阻塞状态），通常会自动执行系统的空闲状态。")]),t._v(" "),s("h5",{attrs:{id:"就绪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#就绪"}},[t._v("#")]),t._v(" 就绪")]),t._v(" "),s("p",[t._v("当一个进程获得了除处理机以外的一切所需资源，一旦得到处理机即可运行，则称此进程处于就绪状态。就绪进程可以按多个优先级来划分队列。例如：当一个进程由于时间片用完而进入就绪状态时，排入低优先级队列；当进程I/O操作完成而进入就绪状态时，排入高优先级队列。")]),t._v(" "),s("h5",{attrs:{id:"阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻塞"}},[t._v("#")]),t._v(" 阻塞")]),t._v(" "),s("p",[t._v("也称为等待或者睡眠状态，一个进程正在等待某一事件发生（例如请求I/O而等待I/O完成等）而暂时停止运行，这时即使把处理机分配给进程也无法运行，所以称进程为阻塞状态。")]),t._v(" "),s("h4",{attrs:{id:"进程的五态模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程的五态模型"}},[t._v("#")]),t._v(" 进程的五态模型")]),t._v(" "),s("p",[t._v("对于一个实际的系统，进程的状态及其转换更为复杂")]),t._v(" "),s("p",[t._v("新建态、活跃就绪/静止就绪、运行、活跃阻塞/静止阻塞、终止态")]),t._v(" "),s("h5",{attrs:{id:"新建态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新建态"}},[t._v("#")]),t._v(" 新建态")]),t._v(" "),s("p",[t._v("对应于进程刚刚被创建时没有被提交的状态，并等待系统完成创建进程的所有必要信息。")]),t._v(" "),s("h5",{attrs:{id:"终止态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#终止态"}},[t._v("#")]),t._v(" 终止态")]),t._v(" "),s("p",[t._v("进程已结束运行，回收除进程控制块之外的其他资源，并让其他进程从进程控制块中收集有关信息")]),t._v(" "),s("h5",{attrs:{id:"活跃就绪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#活跃就绪"}},[t._v("#")]),t._v(" 活跃就绪")]),t._v(" "),s("p",[t._v("进程在主存并且可被调度的状态")]),t._v(" "),s("h5",{attrs:{id:"静止就绪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静止就绪"}},[t._v("#")]),t._v(" 静止就绪")]),t._v(" "),s("p",[t._v("进程被对换到辅存时的就绪状态，是不能被直接调度的状态，只有当主存中没有活跃就绪态进程，或者是挂起就绪进程具有更高的优先级，系统把挂起就绪态进程调回主存并转换为活跃就绪。")]),t._v(" "),s("h5",{attrs:{id:"活跃阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#活跃阻塞"}},[t._v("#")]),t._v(" 活跃阻塞")]),t._v(" "),s("p",[t._v("是指进程已在主存，一旦等待的事件产生便进入活跃就绪状态")]),t._v(" "),s("h5",{attrs:{id:"静止阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静止阻塞"}},[t._v("#")]),t._v(" 静止阻塞")]),t._v(" "),s("p",[t._v("进程对换到辅存时的阻塞状态，一旦等待的事件产生便进入静止就绪状态。")]),t._v(" "),s("h3",{attrs:{id:"线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[t._v("#")]),t._v(" 线程")]),t._v(" "),s("p",[t._v("由于用户的并发请求，为每一个请求都创建一个进程显然是行不通的，从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中线程的概念便被引入。")]),t._v(" "),s("p",[t._v("线程有时被称为轻量级进程，是程序执行流的最小单位。")]),t._v(" "),s("p",[t._v("线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源但它可与同属一个进程的其他线程共享进程所拥有的全部资源。")]),t._v(" "),s("p",[t._v("一个线程可以创建和撤销另一个线程，同一进程中的多个线程之间可以并发执行。")]),t._v(" "),s("p",[t._v("线程是程序中一个单一的顺序控制流程。进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位指运行中的程序的调度单位。")]),t._v(" "),s("p",[t._v("在单个程序中同时运行多个线程完成不同的工作，称为多线程")]),t._v(" "),s("h4",{attrs:{id:"线程的状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程的状态"}},[t._v("#")]),t._v(" 线程的状态")]),t._v(" "),s("h5",{attrs:{id:"就绪状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#就绪状态"}},[t._v("#")]),t._v(" 就绪状态")]),t._v(" "),s("p",[t._v("线程具备运行的所有条件，逻辑上可以运行，在等待处理机")]),t._v(" "),s("h5",{attrs:{id:"运行状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行状态"}},[t._v("#")]),t._v(" 运行状态")]),t._v(" "),s("p",[t._v("线程占有处理机正在运行")]),t._v(" "),s("h5",{attrs:{id:"阻塞状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻塞状态"}},[t._v("#")]),t._v(" 阻塞状态")]),t._v(" "),s("p",[t._v("线程在等待一个事件（如某个信号量），逻辑上不可执行")]),t._v(" "),s("h3",{attrs:{id:"协程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协程"}},[t._v("#")]),t._v(" 协程")]),t._v(" "),s("p",[t._v("协程是一种用户态的轻量级线程，协程的调度完全由用户所控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销。可以不加锁的访问全局变量，所以上下文的切换非常快。")]),t._v(" "),s("h3",{attrs:{id:"线程与进程的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程与进程的区别"}},[t._v("#")]),t._v(" 线程与进程的区别")]),t._v(" "),s("ol",[s("li",[t._v("线程是进程内的一个执行单元，进程内至少有一个线程，他们共享进程的地址空间，而进程有自己独立的地址空间。")]),t._v(" "),s("li",[t._v("进程是资源分配和拥有的单位，同一个进程内的线程共享进程的资源。")]),t._v(" "),s("li",[t._v("线程是处理器调度的基本单位，但进程不是。")]),t._v(" "),s("li",[t._v("两者均可并发执行")]),t._v(" "),s("li",[t._v("每个独立的线程有一个程序运行的入口，顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制")])]),t._v(" "),s("h3",{attrs:{id:"线程与协程的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程与协程的区别"}},[t._v("#")]),t._v(" 线程与协程的区别")]),t._v(" "),s("ol",[s("li",[t._v("一个线程可以有多个协程，一个进程可以单独拥有多个协程")]),t._v(" "),s("li",[t._v("线程进程都是同步机制，而协程是异步")]),t._v(" "),s("li",[t._v("协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态")])]),t._v(" "),s("h2",{attrs:{id:"什么是多进程、多线程？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是多进程、多线程？"}},[t._v("#")]),t._v(" 什么是多进程、多线程？")]),t._v(" "),s("p",[t._v("单进程单线程：一个人在一个桌子上吃饭\n单进程多线程：多个人在同一个桌子上吃饭\n多进程单线程：多个人每个人在自己的桌子上吃饭")]),t._v(" "),s("h3",{attrs:{id:"多进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多进程"}},[t._v("#")]),t._v(" 多进程")]),t._v(" "),s("p",[t._v("同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态，这就是多进程。多开一个进程，多分配一份资源，进程间通讯不方便")]),t._v(" "),s("h3",{attrs:{id:"多线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),s("p",[t._v("线程就是把一个进程分为很多片，每一片可以是一个独立的流程。 与多线程的区别是只会使用一个进程的资源，线程间可以直接通信。")]),t._v(" "),s("h2",{attrs:{id:"同步阻塞模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步阻塞模型"}},[t._v("#")]),t._v(" 同步阻塞模型")]),t._v(" "),s("h3",{attrs:{id:"多进程-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多进程-2"}},[t._v("#")]),t._v(" 多进程")]),t._v(" "),s("p",[t._v("最早的服务端程序都是通过多进程、多线程来解决并发IO的问题，一个请求创建一个进程，然后子进程进入循环同步堵塞的与客户端连接进行交互，收发处理数据。")]),t._v(" "),s("h3",{attrs:{id:"多线程-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程-2"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),s("p",[t._v("用多线程模式实现非常简单，线程中可以直接向某一个客户端连接发送数据。")]),t._v(" "),s("h3",{attrs:{id:"步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[t._v("#")]),t._v(" 步骤")]),t._v(" "),s("ol",[s("li",[t._v("创建一个socket")]),t._v(" "),s("li",[t._v("进入while循环，阻塞在进程accept操作上，等待客户端连接进入")]),t._v(" "),s("li",[t._v("主进程在多进程模型下通过fork创建子进程")]),t._v(" "),s("li",[t._v("多线程模型下可以创建子线程")]),t._v(" "),s("li",[t._v("子进程/线程创建成功后进入while循环，阻塞在recv的调用上，等待客户端向服务器发送数据")]),t._v(" "),s("li",[t._v("客户端向服务器发送数据")]),t._v(" "),s("li",[t._v("收到数据后服务器程序进行处理然后使用send向客户端发送响应")]),t._v(" "),s("li",[t._v("当客户端连接关闭时，子进程/线程退出并销毁所有资源。主进程/线程会回收掉子进程/线程")])]),t._v(" "),s("div",{staticClass:"language-php line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建socket监听")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$socketserv")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream_socket_server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'tcp://0.0.0.0:8000'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$errno")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$errstr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建进程，返回pid，如果pid是0，则表示为主进程")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pcntl_fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean constant"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 强行阻塞连接")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$conn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream_socket_accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$socketserv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$conn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean constant"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$requests")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$conn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fwrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$conn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'hello world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fclose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$conn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("h2",{attrs:{id:"异步非阻塞模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步非阻塞模型"}},[t._v("#")]),t._v(" 异步非阻塞模型")]),t._v(" "),s("p",[t._v("现在各种高并发异步IO的服务器程序都是基于epoll实现的。")]),t._v(" "),s("p",[t._v("关于epoll")]),t._v(" "),s("p",[t._v("原先的系统中都是采用poll连接，每个进程可以维持1024个连接，系统使用的是select模型的话，需要不断的去扫连接数，如果有100w次连接其中只有1次请求连接，那么其余的99.9w次是无效的扫描。\nepoll维持无线数量连接，无需轮询，比如nginx，Golang")]),t._v(" "),s("p",[t._v("IO复用异步非阻塞使用经典的Reactor模型，Reactor顾名思义就是反应堆的意思，它本身不处理任何数据收发，只是可以监测一个Socket的句柄的事件变化。")]),t._v(" "),s("p",[t._v("Reactor模型：")]),t._v(" "),s("ul",[s("li",[t._v("Add:添加一个Socket到Reactor")]),t._v(" "),s("li",[t._v("Set:修改Socket对应的事件，如可读可写")]),t._v(" "),s("li",[t._v("Del:从Reactor中移除")]),t._v(" "),s("li",[t._v("Callback：事件发生后回调指定的函数")])]),t._v(" "),s("p",[t._v("Nginx:多线程Reactor\nSwoole：多线程Reactor+多进程worker")]),t._v(" "),s("div",{staticClass:"language-php line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get到一个reactor模型对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reactor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Reactor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个socket监听")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$scoketserv")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream_socket_server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'tcp://0.0.0.0:80000'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reactor")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$socketserv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EV_READ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$socketserv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reactor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$sockcli")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream_socket_accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$socketserv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reactor")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$sockcli")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EV_READ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$sockcli")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reactor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fwrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$sockcli")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'test'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reactor")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("del")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$sockcli")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fclose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$sockcli")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("h2",{attrs:{id:"php并发编程实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#php并发编程实践"}},[t._v("#")]),t._v(" PHP并发编程实践")]),t._v(" "),s("h3",{attrs:{id:"php的swoole扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#php的swoole扩展"}},[t._v("#")]),t._v(" PHP的Swoole扩展")]),t._v(" "),s("p",[t._v("PHP的异步、并行、高性能网络通信引擎，使用纯C语言实现，提供了PHP语言的异步多线程服务器，异步TCP/UDP网络客户端，异步MySQL,异步Redis，数据库连接池，\nAsyncTask，消息队列，毫秒定时器，异步文件读写，异步DNS查询。")]),t._v(" "),s("p",[t._v("除了异步的IO的支持之外 ，Swoole为PHP多进程模式设计了多个并发数据结构和IPC通信机制，可以大大简化多进程并发编程的工作。")]),t._v(" "),s("h3",{attrs:{id:"消息队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[t._v("#")]),t._v(" 消息队列")]),t._v(" "),s("p",[t._v("场景说明：用户注册后，需要发送邮件和注册短信")]),t._v(" "),s("p",[t._v("串行方式： 将注册信息写入数据库成功后，发送注册邮件，再发送注册短信\n并发方式：将注册信息写入数据库成功后，同时发送注册邮件、发送注册短信\n消息队列方式：将注册信息写入数据库成功后，写入消息队列直接通知用户，离线读取消息队列，发送邮件和短信。")]),t._v(" "),s("h4",{attrs:{id:"应用解藕"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用解藕"}},[t._v("#")]),t._v(" 应用解藕")]),t._v(" "),s("p",[t._v("场景说明：用户下单后，订单系统需要通知库存系统,假如库存系统无法访问，则订单系统减库存将失效，从而导致订单失败。")]),t._v(" "),s("p",[t._v("订单系统与库存系统解藕，用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功。\n订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单消息，进行库存操作")]),t._v(" "),s("h4",{attrs:{id:"流量削锋"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流量削锋"}},[t._v("#")]),t._v(" 流量削锋")]),t._v(" "),s("p",[t._v("应用场景：秒杀活动，流量瞬时激增，服务器压力大\n用户发起请求，服务器接收后，先写入消息队列。假如消息队列长度超过最大值，则直接报错或提示用户。 后续程序读取消息队列，离线处理。")]),t._v(" "),s("h4",{attrs:{id:"日志处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#日志处理"}},[t._v("#")]),t._v(" 日志处理")]),t._v(" "),s("p",[t._v("应用场景：解决大量日志(用户行为、错误日志)的传输\n日志采集程序将程序写入消息队列，然后通过日志处理程序的订阅消费日志。")]),t._v(" "),s("h4",{attrs:{id:"消息通讯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息通讯"}},[t._v("#")]),t._v(" 消息通讯")]),t._v(" "),s("p",[t._v("应用场景：聊天室\n多个客户端订阅同一主题，进行消息发布和接收")]),t._v(" "),s("h3",{attrs:{id:"常见的消息队列产品"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的消息队列产品"}},[t._v("#")]),t._v(" 常见的消息队列产品")]),t._v(" "),s("p",[t._v("Kafka、ActiveMQ、ZeroMQ、RabbitMQ、Redis等")]),t._v(" "),s("h3",{attrs:{id:"接口的并发请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口的并发请求"}},[t._v("#")]),t._v(" 接口的并发请求")]),t._v(" "),s("p",[t._v("curl_multi_init")]),t._v(" "),s("h2",{attrs:{id:"相关链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关链接"}},[t._v("#")]),t._v(" 相关链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pan.baidu.com/disk/home#/all?vmode=list&path=%2F%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%2F%E6%85%95%E8%AF%BE%E7%BD%91%2Fphp%2F%E9%AB%98%E5%8F%AF%E7%94%A8%E9%AB%98%E6%80%A7%E8%83%BDyii2.0%2F8",target:"_blank",rel:"noopener noreferrer"}},[t._v("kafaka消息队列使用"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);